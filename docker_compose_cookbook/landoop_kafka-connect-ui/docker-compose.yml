#------------------------------------------------------------------------------
# Copyright 2019 Robert Cowart
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#------------------------------------------------------------------------------

version: '3'
services:
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:latest
    container_name: kafka-connect-ui
    restart: unless-stopped
    network_mode: bridge
    ports:
      - 8000:8000/tcp
    environment:
      # The CONNECT_URL can be a comma separated array of Connect worker endpoints.
      # IMPORTANT: For the CONNECT_URL you have to use an IP address or a domain that can be resolved to it. You can't
      # use localhost even if you serve Connect's REST port from your localhost. The reason for this is that a docker
      # container has its own network, so your localhost is different from the container's localhost. As an example, if
      # you are in your home network and have an IP address of 192.168.5.65 and run Connect from your computer, instead
      # of http://127.0.1:8083 you must use http://192.168.5.65:8083.
      CONNECT_URL: 'http://192.0.2.11:8000;connect'
      
      # The port number to use for schema-registry-ui. The default is 8000. Usually the main reason for using this is
      # when you run the container with --net=host, where you can't use docker's publish flag (-p HOST_PORT:8000).
      #PORT: 8000

      # Whether to proxy Connect endpoints via the internal webserver. This option is by default set to true as older
      # versions of Connect do not support CORS, so there isn't another way to make the UI work. If you have a recent
      # Connect (0.11 or 1.0) and permit CORS, you can disable the proxying feature.
      PROXY: 'true'

      # Whether to accept self-signed certificates when proxying Connect via https.
      #PROXY_SKIP_VERIFY: 'true'

      # The webserver that powers the image is Caddy. Via this variable you can add options that will be appended to
      # its configuration (Caddyfile). Variables than span multiple lines are supported.
      #
      # As an example, you can set Caddy to not apply timeouts via:
      #   -e "CADDY_OPTIONS=timeouts none"
      # Or you can set basic authentication via:
      #   -e "CADDY_OPTIONS=basicauth / [USER] [PASS]"
      #CADDY_OPTIONS: '[]'
